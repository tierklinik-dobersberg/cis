import axios, { AxiosInstance, AxiosRequestConfig } from "axios";

const requestInterceptor = (req: AxiosRequestConfig) => {
    // Add the current spec ID and name as request headers.
    // The trace middleware will pick them up and forward them to jaeger which
    // makes debugging certain tests much easier as one can search for
    // all trace records generated by a specific test.
    req.headers = req.headers || {};
    req.headers['X-Spec-ID'] = (global as any).currentSpec?.id || '';
    req.headers['X-Spec-Name'] = (global as any).currentSpec?.description || '';
    return req;
}
axios.interceptors.request.use(requestInterceptor);

async function createSession(username: string, password: string): Promise<AxiosInstance> {
    let response = await axios.post("http://localhost:3000/api/identity/v1/login", {
        username,
        password,
    })
    const instance = axios.create({
        headers: {
            'Cookie': `cis-session=${response.data.token}`
        },
        baseURL: "http://localhost:3000",
        validateStatus: status => true // never ever reject the returned promise as we inspect/assert the status code anyway
    })
    instance.interceptors.request.use(requestInterceptor);
    return instance;
}

function getUnauth(): AxiosInstance {
    const instance = axios.create({
        baseURL: "http://localhost:3000",
        validateStatus: status => true // see comment above.
    })

    instance.interceptors.request.use(requestInterceptor);

    return instance;
}


beforeAll(async () => {
    Alice = Alice || await createSession("alice", "password")
    Unauth = Unauth || getUnauth();
})

export let Alice: AxiosInstance;
export let Unauth: AxiosInstance;