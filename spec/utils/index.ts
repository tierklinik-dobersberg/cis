import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

const requestInterceptor = (req: AxiosRequestConfig) => {
    // Add the current spec ID and name as request headers.
    // The trace middleware will pick them up and forward them to jaeger which
    // makes debugging certain tests much easier as one can search for
    // all trace records generated by a specific test.
    req.headers = req.headers || {};
    req.headers['X-Spec-ID'] = (global as any).currentSpec?.id || '';
    req.headers['X-Spec-Name'] = (global as any).currentSpec?.description || '';
    return req;
}
axios.interceptors.request.use(requestInterceptor);

async function createSession(username: string, password: string): Promise<AxiosInstance> {
    let response = await axios.post("http://localhost:3000/api/identity/v1/login", {
        username,
        password,
    })
    const instance = axios.create({
        headers: {
            'Cookie': `cis-session=${response.data.token}`
        },
        baseURL: "http://localhost:3000",
        validateStatus: status => true // never ever reject the returned promise as we inspect/assert the status code anyway
    })
    instance.interceptors.request.use(requestInterceptor);
    return instance;
}

function getUnauth(): AxiosInstance {
    const instance = axios.create({
        baseURL: "http://localhost:3000",
        validateStatus: status => true // see comment above.
    })

    instance.interceptors.request.use(requestInterceptor);

    return instance;
}

export const expectResponse = (response: AxiosResponse, code: number = 200) => {
    expect(response.status).toBe(code, response.data)
}

export async function waitForEvent(inst: AxiosInstance, eventID: string, filter: (r: any) => boolean = () => true): Promise<any> {
    while (true) {
        const response = await inst.get(`/api/triggers/v1/wait`, {params: {
            event: eventID,
            timeout: '10s',
        }})

        if (response.status === 200) {
            if (filter(response.data)) {
                return response.data;
            }

            // try again because the filter did not match
            continue
        }

        // 408 === RequestTimeout is returned when the specified timeout
        // expired.
        if (response.status !== 408) {
            console.error(`unexpected status code ${response.status} ${response.statusText}`)
            throw response;
        }
    }
}

async function bootstrapIdentities() {
    let response: AxiosResponse;
    let Admin =  await createSession("admin", "password")

    response = await Admin.post(`/api/config/v1/schema/UserProperty`, {
        config:{
            Name: "PhoneExtension",
            Type: "string",
            Visibility: "public"
        }
    })
    expectResponse(response, 200)
    response = await Admin.post(`/api/config/v1/schema/UserProperty`, {
        config:{
            Name: "PrivateProperty",
            Type: "string",
            Visibility: "private"
        }
    })
    expectResponse(response, 200)

    response = await Admin.post(`/api/identity/v1/roles/default-role`, {
        description: 'A default role for all users'
    })
    expectResponse(response, 204)

    response = await Admin.post(`/api/identity/v1/roles/doctor`, {
        description: 'A role for doctors'
    })
    expectResponse(response, 204)

    response = await Admin.post(`/api/identity/v1/roles/intern`, {
        description: 'A role for testing autologin/autoassign'
    })
    expectResponse(response, 204)


    response = await Admin.post(`/api/identity/v1/users/alice`, {
        "name": "alice",
        "fullname": "Alice Musterfrau",
        "mail": ["alice@example.at", "alice@example.com"],
        "phoneNumbers": ["+4312345678", "+2812345"],
        "roles": ["default-role", "doctor"],
        "properties": { 
            "PhoneExtension": "10",
            "PrivateProperty": "some-secret-value"
        },
        "calendarID": "primary",
        "color": "#1b7550b9",
        "password": "password",
    })
    expectResponse(response, 204)

    // for our simple test cases, allice is allowed to do anything
    response = await Admin.post(`/api/identity/v1/permissions/users/alice`, {
        description: "Alice can do everything",
        actions: [".*"],
        resources: [".*"],
        effect: "allow"
    })

    response = await Admin.post(`/api/identity/v1/users/bob`, {
        "name": "bob",
        "fullname": "Bob Mustermann",
        "mail": ["bob@example.com"],
        "phoneNumbers": null,
        "roles": ["default-role"],
        "properties": { "PhoneExtension": "12" },
        "color": "#ddb0b0"
    })
    expectResponse(response, 200)

    response = await Admin.post(`/api/identity/v1/users/guest`, {
        "name": "guest",
        "fullname": "guest user",
        "mail": null,
        "phoneNumbers": null,
        "roles": ["Service Account"],
        "properties": {}
    })
    expectResponse(response, 200)

    response = await Admin.post(`/api/identity/v1/users/diser`, {
        "name": "diser",
        "fullname": "Disabled user",
        "mail": null,
        "phoneNumbers": null,
        "roles": ["default-role"],
        "properties": { "PhoneExtension": "13" },
        "color": "#1b7550b9",
        "disabled": true,
    })
    expectResponse(response, 200)
}

beforeAll(async () => {
    await bootstrapIdentities()

    Unauth = Unauth || getUnauth();
    Alice = Alice || await createSession("alice", "password")
})


export let Admin: AxiosInstance;
export let Alice: AxiosInstance;
export let Unauth: AxiosInstance;